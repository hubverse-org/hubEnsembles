[{"path":[]},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying standards acceptable behavior. Enforcement responsibility Code Conduct Committee, take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Instances abusive, harassing, otherwise unacceptable behavior may reported member Code Conduct Committee. complaints reviewed investigated promptly fairly. Code Conduct Committee use Enforcement Manual determining consequences action deem violation Code Conduct. community leaders Code Conduct Committee members obligated respect privacy security reporter incident.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to hubEnsembles","title":"Contributing to hubEnsembles","text":"outlines propose change hubEnsembles. general info contributing , hubverse packages, please see hubverse contributing guide. can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to hubEnsembles","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). procedures contributing bigger changes, code particular, generally follow advised tidyverse dev team, including following tidyverse style guide code recording user facing changes NEWS.md.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to hubEnsembles","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"hubverse-org/hubEnsembles\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Follow pull request checklist create Git branch pull request (PR). recommend using usethis::pr_init(\"name/brief-description/issue\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first heading—usually labelled “development version”). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to hubEnsembles","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to hubEnsembles","text":"Please note hubEnsembles project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Consortium Infectious Disease Modeling Hubs Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"hubEnsembles","text":"hubEnsembles package provides flexible framework aggregating model outputs, forecasts projections, submitted hub multiple models combined ensemble model outputs. package includes two main functions: simple_ensemble linear_pool. illustrate functions vignette, briefly compare . vignette uses following R packages:","code":"library(dplyr) library(ggplot2) library(hubUtils) library(hubVis) library(hubEnsembles)"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"example-data-a-forecast-hub","dir":"Articles","previous_headings":"","what":"Example data: a forecast hub","title":"hubEnsembles","text":"use example hub provided hubverse demonstrate functionality hubEnsembles package. example hub, stored hubExamples package, generated modified forecasts FluSight forecasting challenge, collaborative modeling exercise run US Centers Disease Control Prevention (CDC) since 2013 solicits seasonal influenza forecasts outside modeling teams. hubExamples package includes model output data target data (observed data corresponding prediction target, sometimes known “truth” data) two forms defined hubverse: target time series data oracle output data. load forecast_outputs forecast_target_ts data objects containing model output target time series data, respectively. Note toy model outputs contain predictions small subset rows select dates, locations, output type IDs, far fewer actual modeling hub typically collect. model output data includes mean, median, quantile, sample forecasts future incident influenza hospitalizations; well CDF PMF forecasts hospitalization intensity (latter made categories determined threshold weekly hospital admissions per 100,000 population). forecast made five task ID variables, including location forecast made (location), date forecast made (reference_date), number steps ahead (horizon), date forecast prediction (combination date forecast made forecast horizon, target_end_date), forecast target (target). print subset example model output. corresponding target time series data provide observed incident influenza hospitalizations (observation) given week (date) given location (location). format target data generally used calibration data generating forecasts conjunction forecasts visualizations. (form target data, oracle output, suitable evaluating forecasts post hoc, scope vignette). forecast-specific task ID variables reference_date horizon relevant use cases target time series data thus omitted.","code":"otid <- list(   mean = NA,   median = NA,   quantile = c(0, 0.25, 0.75),   sample = c(\"2101\", \"2102\", \"2103\"),   pmf = c(\"low\", \"moderate\", \"high\", \"very high\"),   cdf = c(1, 13, 15) )  hubExamples::forecast_outputs |>   dplyr::filter(     output_type_id %in% unlist(otid),     reference_date == \"2022-12-17\",     location == \"25\",     horizon == 1   ) |>   dplyr::arrange(model_id, dplyr::desc(target), output_type) |>   print(n = 16) #> # A tibble: 48 × 9 #>    model_id          reference_date target                    horizon location target_end_date output_type output_type_id   value #>    <chr>             <date>         <chr>                       <int> <chr>    <date>          <chr>       <chr>            <dbl> #>  1 Flusight-baseline 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      mean        NA             5.82e+2 #>  2 Flusight-baseline 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      median      NA             5.82e+2 #>  3 Flusight-baseline 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      quantile    0.25           5.66e+2 #>  4 Flusight-baseline 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      quantile    0.75           5.98e+2 #>  5 Flusight-baseline 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      sample      2101           6.06e+2 #>  6 Flusight-baseline 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      sample      2102           5.76e+2 #>  7 Flusight-baseline 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      sample      2103           5.78e+2 #>  8 Flusight-baseline 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         low            9.70e-6 #>  9 Flusight-baseline 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         moderate       2.94e-3 #> 10 Flusight-baseline 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         high           7.35e-2 #> 11 Flusight-baseline 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         very high      9.24e-1 #> 12 Flusight-baseline 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         0.25           8.63e-9 #> 13 Flusight-baseline 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         0.75           4.83e-8 #> 14 Flusight-baseline 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         1              1.10e-7 #> 15 Flusight-baseline 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         13             1.00e+0 #> 16 Flusight-baseline 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         15             1.00e+0 #> # ℹ 32 more rows head(hubExamples::forecast_target_ts, 10) #> # A tibble: 10 × 3 #>    date       location observation #>    <date>     <chr>          <dbl> #>  1 2020-01-11 01                 0 #>  2 2020-01-11 15                 0 #>  3 2020-01-11 18                 0 #>  4 2020-01-11 27                 0 #>  5 2020-01-11 30                 0 #>  6 2020-01-11 37                 0 #>  7 2020-01-11 48                 0 #>  8 2020-01-11 US                 1 #>  9 2020-01-18 01                 0 #> 10 2020-01-18 15                 0"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"creating-ensembles-with-simple_ensemble","dir":"Articles","previous_headings":"","what":"Creating ensembles with simple_ensemble","title":"hubEnsembles","text":"simple_ensemble() function directly computes ensemble component model outputs combining via function within unique combination task ID variables, output types, output type IDs. function can used summarize predictions output types mean, median, quantile, CDF, PMF. mechanics ensemble calculations output types, though resulting statistical ensembling method differs different output types. default, simple_ensemble() uses mean aggregation function equal weights models, though user can create different types weighted ensembles specifying aggregation function weights. Using default options simple_ensemble(), can generate equally weighted mean ensemble unique combination values task ID variables, output_type output_type_id. means different ensemble methods used different output types: quantile output type example data, resulting ensemble quantile average, mean, CDF, PMF output types ensemble linear pool. simple_ensemble() function support sample output type, remove sample predictions forecast model outputs. resulting model output structure original model output data, columns model ID, task ID variables, output type, output type ID, value. also use model_id = \"simple-ensemble-mean\" change name ensemble resulting model output; specified, default “hub-ensemble”. subset predictions printed .","code":"mean_ens <- hubExamples::forecast_outputs |>   dplyr::filter(output_type != \"sample\") |>   hubEnsembles::simple_ensemble(     model_id = \"simple-ensemble-mean\"   ) mean_ens |>   dplyr::filter(     output_type_id %in% unlist(otid),     reference_date == \"2022-12-17\",     location == \"25\",     horizon == 1   ) #> # A tibble: 13 × 9 #>    model_id             reference_date target                    horizon location target_end_date output_type output_type_id      value #>    <chr>                <date>         <chr>                       <int> <chr>    <date>          <chr>       <chr>               <dbl> #>  1 simple-ensemble-mean 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         0.25             0.000284 #>  2 simple-ensemble-mean 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         0.75             0.000556 #>  3 simple-ensemble-mean 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         1                0.000767 #>  4 simple-ensemble-mean 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         13               0.947    #>  5 simple-ensemble-mean 2022-12-17     wk flu hosp rate                1 25       2022-12-24      cdf         15               0.977    #>  6 simple-ensemble-mean 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         high             0.151    #>  7 simple-ensemble-mean 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         low              0.00437  #>  8 simple-ensemble-mean 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         moderate         0.0233   #>  9 simple-ensemble-mean 2022-12-17     wk flu hosp rate category       1 25       2022-12-24      pmf         very high        0.821    #> 10 simple-ensemble-mean 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      mean        NA             627.       #> 11 simple-ensemble-mean 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      median      NA             620.       #> 12 simple-ensemble-mean 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      quantile    0.25           542.       #> 13 simple-ensemble-mean 2022-12-17     wk inc flu hosp                 1 25       2022-12-24      quantile    0.75           704."},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"changing-the-aggregation-function","dir":"Articles","previous_headings":"Creating ensembles with simple_ensemble","what":"Changing the aggregation function","title":"hubEnsembles","text":"can change function used aggregate model outputs. example, may want calculate median component models’ submitted values quantile. specifying agg_fun = median. Custom functions can also passed agg_fun argument. illustrate defining custom function compute ensemble prediction geometric mean component model predictions. custom function used must argument x vector numeric values summarize, relevant, argument w numeric weights. expected, mean, median, geometric mean give us slightly different resulting ensembles. median point estimates, 50% prediction intervals, 90% prediction intervals figure demonstrate . Note geometric mean ensemble simple mean ensemble generate similar estimates case predicting weekly incident influenza hospitalizations Massachusetts.","code":"median_ens <- hubExamples::forecast_outputs |>   dplyr::filter(output_type != \"sample\") |>   hubEnsembles::simple_ensemble(     agg_fun = median,     model_id = \"simple-ensemble-median\"   ) geometric_mean <- function(x) {   n <- length(x)   prod(x)^(1 / n) } geometric_mean_ens <- hubExamples::forecast_outputs |>   dplyr::filter(output_type != \"sample\") |>   hubEnsembles::simple_ensemble(     agg_fun = geometric_mean,     model_id = \"simple-ensemble-geometric\"   )"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"weighting-model-contributions","dir":"Articles","previous_headings":"Creating ensembles with simple_ensemble","what":"Weighting model contributions","title":"hubEnsembles","text":"can weight contributions model ensemble using weights argument simple_ensemble(). argument takes data.frame include model_id column containing unique model ID weight column. following example, include baseline model ensemble, give less weight forecasts.","code":"model_weights <- data.frame(   model_id = c(\"MOBS-GLEAM_FLUH\", \"PSI-DICE\", \"Flusight-baseline\"),   weight = c(0.4, 0.4, 0.2) ) weighted_mean_ens <- hubExamples::forecast_outputs |>   dplyr::filter(output_type != \"sample\") |>   hubEnsembles::simple_ensemble(     weights = model_weights,     model_id = \"simple-ensemble-weighted-mean\"   ) head(weighted_mean_ens, 10) #> # A tibble: 10 × 9 #>    model_id                      reference_date target           horizon location target_end_date output_type output_type_id  value #>    <chr>                         <date>         <chr>              <int> <chr>    <date>          <chr>       <chr>           <dbl> #>  1 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.25           0.0129 #>  2 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.5            0.115  #>  3 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.75           0.546  #>  4 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1              0.805  #>  5 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.25           0.910  #>  6 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.5            0.964  #>  7 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.75           0.989  #>  8 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10             1      #>  9 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10.25          1      #> 10 simple-ensemble-weighted-mean 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10.5           1"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"creating-ensembles-with-linear_pool","dir":"Articles","previous_headings":"","what":"Creating ensembles with linear_pool","title":"hubEnsembles","text":"linear_pool() function implements linear opinion pool (LOP, also known distributional mixture) method (Stone 1961, Lichtendahl 2013) ensembling predictions. function can used combine predictions output types mean, CDF, PMF, sample, quantile. Unlike simple_ensemble(), function handles computation differently based output type. CDF, PMF, mean output types, linear pool method equivalent calling simple_ensemble() mean aggregation function, since simple_ensemble() produces linear pool prediction (average individual model cumulative bin probabilities). sample output type, LOP method pools input sample predictions combined ensemble distribution. default, linear_pool() function simply collect return provided samples, number samples ensemble equal sum number samples individual models. However, user may also specify number sample predictions ensemble return using n_output_samples argument, case random subset predictions individual models selected create linear pool samples component models represented equally. random selection samples stratified model approximately number samples individual model included ensemble. See Requesting ensemble subsets samples details, including explanation additional hubverse concepts relevant process. quantile output type, linear_pool() function first must approximate full probability distribution using value-quantile level pairs component model. default, done functions distfromq package, defaults fitting monotonic cubic spline interior Gaussian normal distribution tails. Quasi-random samples drawn distributional estimate, collected used extract desired quantiles final ensemble distribution. Using default options linear_pool(), can generate equally-weighted linear pool output types example hub (except median output type, must excluded). resulting distribution linear pool quantiles estimated using default n_samples = 1e4 quasi-random samples drawn distribution component model. figure , compare ensemble results generated simple_ensemble() linear_pool() model outputs output types PMF quantile. Panel shows PMF type predictions Massachusetts incident influenza hospitalization intensity Panel B shows quantile type predictions Massachusetts weekly incident influenza hospitalizations. expected, results two functions equivalent PMF output type: output type, simple_ensemble() method averages predicted probability category across component models, definition linear pool ensemble method. case quantile output type, simple_ensemble() computing quantile average.","code":"linear_pool_norm <- hubExamples::forecast_outputs |>   dplyr::filter(output_type != \"median\") |>   hubEnsembles::linear_pool(model_id = \"linear-pool-normal\") head(linear_pool_norm, 10) #> # A tibble: 10 × 9 #>    model_id           reference_date target           horizon location target_end_date output_type output_type_id  value #>    <chr>              <date>         <chr>              <int> <chr>    <date>          <chr>       <chr>           <dbl> #>  1 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.25           0.0176 #>  2 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.5            0.118  #>  3 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.75           0.550  #>  4 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1              0.819  #>  5 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.25           0.919  #>  6 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.5            0.968  #>  7 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.75           0.990  #>  8 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10             1      #>  9 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10.25          1      #> 10 linear-pool-normal 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10.5           1"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"weighting-model-contributions-1","dir":"Articles","previous_headings":"Creating ensembles with linear_pool","what":"Weighting model contributions","title":"hubEnsembles","text":"Like simple_ensemble(), can change default function settings. example, weights determine model’s contribution resulting ensemble may provided. (Note must exclude sample output type yet supported weighted ensembles.)","code":"model_weights <- data.frame(   model_id = c(\"MOBS-GLEAM_FLUH\", \"PSI-DICE\", \"Flusight-baseline\"),   weight = c(0.4, 0.4, 0.2) ) weighted_linear_pool_norm <- hubExamples::forecast_outputs |>   dplyr::filter(!output_type %in% c(\"median\", \"sample\")) |>   hubEnsembles::linear_pool(     weights = model_weights,     model_id = \"linear-pool-weighted\"   ) head(weighted_linear_pool_norm, 10) #> # A tibble: 10 × 9 #>    model_id             reference_date target           horizon location target_end_date output_type output_type_id  value #>    <chr>                <date>         <chr>              <int> <chr>    <date>          <chr>       <chr>           <dbl> #>  1 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.25           0.0129 #>  2 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.5            0.115  #>  3 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         0.75           0.546  #>  4 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1              0.805  #>  5 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.25           0.910  #>  6 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.5            0.964  #>  7 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         1.75           0.989  #>  8 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10             1      #>  9 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10.25          1      #> 10 linear-pool-weighted 2022-11-19     wk flu hosp rate       0 25       2022-11-19      cdf         10.5           1"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"changing-the-parametric-family-used-for-extrapolation-into-distribution-tails","dir":"Articles","previous_headings":"Creating ensembles with linear_pool","what":"Changing the parametric family used for extrapolation into distribution tails","title":"hubEnsembles","text":"can also change distribution distfromq uses approximate tails component models’ predictive distributions either log normal Cauchy using tail_dist argument. choice usually large impact resulting ensemble distribution, though, can seen outer edges. (details function options, see documentation distfromq package.)","code":"linear_pool_lnorm <- hubExamples::forecast_outputs |>   dplyr::filter(output_type == \"quantile\") |>   hubEnsembles::linear_pool(     model_id = \"linear-pool-lognormal\",     tail_dist = \"lnorm\"   ) linear_pool_cauchy <- hubExamples::forecast_outputs |>   dplyr::filter(output_type == \"quantile\") |>   hubEnsembles::linear_pool(     model_id = \"linear-pool-cauchy\",     tail_dist = \"cauchy\"   )"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/articles/hubEnsembles.html","id":"requesting-an-ensemble-that-subsets-samples","dir":"Articles","previous_headings":"Creating ensembles with linear_pool","what":"Requesting an ensemble that subsets samples","title":"hubEnsembles","text":"one wishes request subsetted ensemble samples, becomes important distinguish marginal joint predictive distributions, dependence structure must defined call linear_pool(). concepts compound task ID set derived task ID variables must also understood since used help identify dependence structure (lack thereof, case marginal distributions) ensembled predictive distributions. hubverse, output types summarize predictions marginal distributions, e.g. single location time point. sample output type unique can additionally represent predictions joint predictive distributions. means samples may encode dependence across combinations multiple values task ID variables, e.g. across multiple locations /time points. case, sample predictions index (specified output_type_id) particular model may assumed correspond single sample joint distribution. example data sample output type task ID variables \"reference_date\", \"location\", \"horizon\", \"target\", \"target_end_date\". example, samples capture dependence across different forecast \"horizon\"s; however, samples capture dependence across different \"reference_date\"s, \"location\"s, \"target\"s. specifically requesting linear pool made subset input sample predictions, user must identify dependence structure using compound_taskid_set parameter ensure resulting ensemble valid. compound task ID set consists independent task ID variables , together, identify “compound modeling task” corresponding single modeled unit multivariate outcome interest. Samples summarizing marginal distribution generally compound task ID set composed task ID variables1. hand, samples summarizing joint distribution compound task ID set contains task ID variables joint distribution capture dependence. example, compound task predicting number weekly incident influenza hospitalizations (\"target\") Massachusetts (\"location\") starting November 19, 2022 (\"reference_date\"). , \"horizon\" part compound task ID set, indicating sample predictions made horizon depend horizons within every compound task sample output type. sample can therefore interpreted trajectory giving possible path hospitalizations time. three task id variables (\"reference_date\", \"location\", \"target\") make compound task ID set specified call linear_pool(). Derived task IDs another subset task ID variables whose values “derived” solely combination values task ID variables, may may part compound task ID set. example, \"target_end_date\" given forecast derived combination \"reference_date\" \"horizon\", specified argument derived_tasks. derived task \"target_end_date\" part compound task ID set \"reference_date\" \"horizon\" part compound task ID set. Generally, derived task IDs needed identify single model unit multivariate outcome interest (purpose compound task id set), unless task ID variables values depend upon already part compound task ID set. model outputs contain derived task IDs, case argument may set NULL (default value). However, important provide linear_pool() function derived task IDs, used check provided compound task ID set compatible input sample predictions help ensure resulting (multivariate) ensemble valid.","code":"hubExamples::forecast_outputs |>   dplyr::filter(output_type == \"sample\") |>   dplyr::mutate(output_type_id = as.numeric(output_type_id)) |> # make indices numeric for readability   hubEnsembles::linear_pool(     weights = NULL,     model_id = \"linear-pool-joint\",     task_id_cols = c(\"reference_date\", \"location\", \"horizon\", \"target\", \"target_end_date\"),     compound_taskid_set = c(\"reference_date\", \"location\", \"target\"),     derived_tasks = \"target_end_date\",     n_output_samples = 100   ) #> # A tibble: 1,600 × 9 #>    model_id          reference_date target          horizon location target_end_date output_type output_type_id value #>  * <chr>             <date>         <chr>             <int> <chr>    <date>          <chr>                <int> <dbl> #>  1 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   1     2 #>  2 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   2    47 #>  3 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   3    56 #>  4 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   4    47 #>  5 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   5    64 #>  6 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   6    55 #>  7 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   7    54 #>  8 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   8    56 #>  9 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                   9    58 #> 10 linear-pool-joint 2022-11-19     wk inc flu hosp       0 25       2022-11-19      sample                  10    36 #> # ℹ 1,590 more rows"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evan L Ray. Author. Li Shandross. Author, maintainer. Emily Howerton. Author. Anna Krystalli. Contributor. Zhian N. Kamvar. Contributor. Nicholas G. Reich. Contributor. Consortium Infectious Disease Modeling Hubs. Copyright holder.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ray E, Shandross L, Howerton E (2025). hubEnsembles: Ensemble Methods Combining Hub Model Outputs. R package version 0.1.9.9000, https://github.com/hubverse-org/hubEnsembles.","code":"@Manual{,   title = {hubEnsembles: Ensemble Methods for Combining Hub Model Outputs},   author = {Evan L Ray and Li Shandross and Emily Howerton},   year = {2025},   note = {R package version 0.1.9.9000},   url = {https://github.com/hubverse-org/hubEnsembles}, }"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/index.html","id":"hubensembles-","dir":"","previous_headings":"","what":"Ensemble Methods for Combining Hub Model Outputs","title":"Ensemble Methods for Combining Hub Model Outputs","text":"goal hubEnsembles provide standard implementations commonly used methods ensembling model outputs. hubEnsembles package part hubverse project expects input data key functions formatted object model_out_tbl class.","code":""},{"path":[]},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/index.html","id":"latest","dir":"","previous_headings":"Installation","what":"Latest","title":"Ensemble Methods for Combining Hub Model Outputs","text":"can install released version hubEnsembles CRAN :","code":"install.packages(\"hubEnsembles\")"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/index.html","id":"development","dir":"","previous_headings":"Installation","what":"Development","title":"Ensemble Methods for Combining Hub Model Outputs","text":"want test new features yet released, can install development version hubEnsembles GitHub :","code":"remotes::install_github(\"hubverse-org/hubEnsembles\")"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Ensemble Methods for Combining Hub Model Outputs","text":"Please note hubEnsembles package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Ensemble Methods for Combining Hub Model Outputs","text":"Interested contributing back open-source Hubverse project? Learn get involved Hubverse Community contribute hubEnsembles package.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/component_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example model output data for linear_pool() — component_outputs","title":"Example model output data for linear_pool() — component_outputs","text":"Toy model output data formatted according hubverse standards used examples linear_pool(). predictions included taken three normal distributions means -3, 0, 3 standard deviations 1.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/component_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example model output data for linear_pool() — component_outputs","text":"","code":"component_outputs"},{"path":[]},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/component_outputs.html","id":"component-outputs","dir":"Reference","previous_headings":"","what":"component_outputs","title":"Example model output data for linear_pool() — component_outputs","text":"data frame 123 rows 5 columns: model_id model ID target forecast target output_type type forecast output_type_id output type ID value forecast value","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/fweights.html","id":null,"dir":"Reference","previous_headings":"","what":"Example weights data for simple_ensemble() — fweights","title":"Example weights data for simple_ensemble() — fweights","text":"Toy weights data formatted according hubverse standards used examples simple_ensemble()","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/fweights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example weights data for simple_ensemble() — fweights","text":"","code":"fweights"},{"path":[]},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/fweights.html","id":"fweights","dir":"Reference","previous_headings":"","what":"fweights","title":"Example weights data for simple_ensemble() — fweights","text":"data frame 8 rows 3 columns: model_id model ID location FIPS codes weight weight","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/linear_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ensemble model outputs as a linear pool, otherwise known as a distributional mixture, of component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, quantile, cdf, pmf, and sample. — linear_pool","title":"Compute ensemble model outputs as a linear pool, otherwise known as a distributional mixture, of component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, quantile, cdf, pmf, and sample. — linear_pool","text":"Compute ensemble model outputs linear pool, otherwise known distributional mixture, component model outputs combination model task, output type, output type id. Supported output types include mean, quantile, cdf, pmf, sample.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/linear_pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ensemble model outputs as a linear pool, otherwise known as a distributional mixture, of component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, quantile, cdf, pmf, and sample. — linear_pool","text":"","code":"linear_pool(   model_out_tbl,   weights = NULL,   weights_col_name = \"weight\",   model_id = \"hub-ensemble\",   task_id_cols = NULL,   compound_taskid_set = NA,   derived_tasks = NULL,   n_samples = 10000,   n_output_samples = NULL,   ... )"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/linear_pool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ensemble model outputs as a linear pool, otherwise known as a distributional mixture, of component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, quantile, cdf, pmf, and sample. — linear_pool","text":"model_out_tbl object class model_out_tbl component model outputs (e.g., predictions). weights optional data.frame component model weights. provided, column named model_id column containing model weights. Optionally, may contain additional columns corresponding task id variables, output_type, output_type_id, weights specific values variables. default NULL, case equally-weighted ensemble calculated. prevalidated. weights_col_name character string naming column weights model weights. Defaults \"weight\" model_id character string identifier use ensemble model. task_id_cols character vector names columns model_out_tbl specify modeling tasks. Defaults NULL, case columns model_out_tbl \"model_id\", \"output_type\", \"output_type_id\", \"value\" used task ids. compound_taskid_set character vector compound task ID variable set. argument relevant output_type \"sample\". Can one three possible values, following meanings: NA: compound_taskid_set relevant current modeling task NULL: samples multivariate joint distribution across levels task id variables Equality task_id_cols: samples separate univariate distributions individual prediction task Defaults NA. Derived task ids must included task ids values depend part compound_taskid_set. derived_tasks character vector derived task IDs (variables whose values depend task ID variables). Defaults NULL, meaning derived task IDs. n_samples numeric specifies number samples use calculating quantiles estimated quantile function. Defaults 1e4. n_output_samples numeric specifies many sample forecasts return per unique combination task IDs. Currently supported value NULL, case provided component model samples collected returned. ... parameters passed distfromq::make_q_fn, specifying details estimate quantile function provided quantile levels quantile values output_type \"quantile\".","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/linear_pool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ensemble model outputs as a linear pool, otherwise known as a distributional mixture, of component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, quantile, cdf, pmf, and sample. — linear_pool","text":"model_out_tbl object ensemble predictions. Note additional columns input model_out_tbl dropped.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/linear_pool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute ensemble model outputs as a linear pool, otherwise known as a distributional mixture, of component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, quantile, cdf, pmf, and sample. — linear_pool","text":"underlying mechanism computations varies different output_types. output_type cdf, pmf, mean, function simply calls simple_ensemble calculate (weighted) mean component model outputs. definitional calculation CDF PMF linear pool. mean output type, justified fact (weighted) mean linear pool (weighted) mean means component distributions. output_type quantile, obtain quantiles linear pool three steps: Interpolate extrapolate provided quantiles component model obtain estimate CDF distribution. Draw samples distribution component model. reduce Monte Carlo variability, use quasi-random samples corresponding quantiles estimated distribution. Collect samples component models extract desired quantiles. Steps 1 2 process performed distfromq::make_q_fn. output_type sample, obtain resulting linear pool collecting samples model, updating output_type_id values unique predictions joint across, pooling together. restriction number samples output per compound unit, number divided evenly among models compound unit (remainder distributed randomly).","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/linear_pool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute ensemble model outputs as a linear pool, otherwise known as a distributional mixture, of component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, quantile, cdf, pmf, and sample. — linear_pool","text":"","code":"# We illustrate the calculation of a linear pool when we have quantiles from the # component models. We take the components to be normal distributions with # means -3, 0, and 3, all standard deviations 1, and weights 0.25, 0.5, and 0.25. data(component_outputs) #> Warning: data set ‘component_outputs’ not found data(weights) #> Warning: data set ‘weights’ not found  expected_quantiles <- seq(from = -5, to = 5, by = 0.25) lp_from_component_qs <- linear_pool(component_outputs, weights)  head(lp_from_component_qs) #> # A tibble: 6 × 5 #>   model_id     target    output_type output_type_id value #>   <chr>        <chr>     <chr>                <dbl> <dbl> #> 1 hub-ensemble inc death quantile           0.00569 -5.00 #> 2 hub-ensemble inc death quantile           0.0100  -4.75 #> 3 hub-ensemble inc death quantile           0.0167  -4.50 #> 4 hub-ensemble inc death quantile           0.0264  -4.25 #> 5 hub-ensemble inc death quantile           0.0397  -4.00 #> 6 hub-ensemble inc death quantile           0.0567  -3.75 all.equal(lp_from_component_qs$value, expected_quantiles, tolerance = 1e-2,           check.attributes = FALSE) #> [1] TRUE"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/make_sample_indices_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Make the output type ID values of sample forecasts distinct for different models — make_sample_indices_unique","title":"Make the output type ID values of sample forecasts distinct for different models — make_sample_indices_unique","text":"Make output type ID values sample forecasts distinct different models","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/make_sample_indices_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make the output type ID values of sample forecasts distinct for different models — make_sample_indices_unique","text":"","code":"make_sample_indices_unique(model_out_tbl)"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/make_sample_indices_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make the output type ID values of sample forecasts distinct for different models — make_sample_indices_unique","text":"model_out_tbl object class model_out_tbl component model outputs (e.g., predictions).","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/make_sample_indices_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make the output type ID values of sample forecasts distinct for different models — make_sample_indices_unique","text":"model_out_tbl object unique output type ID values different models otherwise identical input model_out_tbl.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/make_sample_indices_unique.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make the output type ID values of sample forecasts distinct for different models — make_sample_indices_unique","text":"new output_type_id column values follow one two patterns, depending whether column detected numeric: output type ID numeric (may character): concatenation prediction's model ID original output type ID output type ID numeric: numeric representation pattern rendered factor.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/model_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example model output data for simple_ensemble() — model_outputs","title":"Example model output data for simple_ensemble() — model_outputs","text":"Toy model output data formatted according hubverse standards used examples simple_ensemble()","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/model_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example model output data for simple_ensemble() — model_outputs","text":"","code":"model_outputs"},{"path":[]},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/model_outputs.html","id":"model-outputs","dir":"Reference","previous_headings":"","what":"model_outputs","title":"Example model output data for simple_ensemble() — model_outputs","text":"data frame 24 rows 8 columns: model_id model ID location FIPS codes horizon forecast horizon target forecast target target_date date forecast output_type type forecast output_type_id output type ID value forecast value","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/simple_ensemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ensemble model outputs by summarizing component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, median, quantile, cdf, and pmf. — simple_ensemble","title":"Compute ensemble model outputs by summarizing component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"Compute ensemble model outputs summarizing component model outputs combination model task, output type, output type id. Supported output types include mean, median, quantile, cdf, pmf.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/simple_ensemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ensemble model outputs by summarizing component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"","code":"simple_ensemble(   model_out_tbl,   weights = NULL,   weights_col_name = \"weight\",   agg_fun = mean,   agg_args = list(),   model_id = \"hub-ensemble\",   task_id_cols = NULL )"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/simple_ensemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ensemble model outputs by summarizing component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"model_out_tbl object class model_out_tbl component model outputs (e.g., predictions). weights optional data.frame component model weights. provided, column named model_id column containing model weights. Optionally, may contain additional columns corresponding task id variables, output_type, output_type_id, weights specific values variables. default NULL, case equally-weighted ensemble calculated. prevalidated. weights_col_name character string naming column weights model weights. Defaults \"weight\" agg_fun function character string name function use aggregating component model outputs ensemble outputs. See details information. agg_args named list additional arguments passed agg_fun. model_id character string identifier use ensemble model. task_id_cols character vector names columns model_out_tbl specify modeling tasks. Defaults NULL, case columns model_out_tbl \"model_id\", \"output_type\", \"output_type_id\", \"value\" used task ids.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/simple_ensemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ensemble model outputs by summarizing component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"model_out_tbl object ensemble predictions. Note additional columns input model_out_tbl dropped.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/simple_ensemble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute ensemble model outputs by summarizing component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"default agg_fun \"mean\", case ensemble's output average component model outputs within group defined combination values task id columns, output type, output type id. provided agg_fun argument x vector numeric values summarize, weighted methods, argument w numeric vector weights. desired use aggregation function accept arguments, wrapper need written. weighted methods, agg_fun = \"mean\" agg_fun = \"median\" translated use matrixStats::weightedMean matrixStats::weightedMedian respectively. matrixStats::weightedMedian, argument interpolate automatically set FALSE circumvent calculation issue results invalid distributions.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/simple_ensemble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute ensemble model outputs by summarizing component model outputs for each combination of model task, output type, and output type id. Supported output types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"","code":"# Calculate a weighted median in two ways data(model_outputs) #> Warning: data set ‘model_outputs’ not found data(fweights) #> Warning: data set ‘fweights’ not found  weighted_median1 <- simple_ensemble(model_outputs, weights = fweights,                                     agg_fun = stats::median) weighted_median2 <- simple_ensemble(model_outputs, weights = fweights,                                      agg_fun = matrixStats::weightedMedian) all.equal(weighted_median1, weighted_median2) #> [1] TRUE"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/validate_compound_taskid_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform validations on the compound task ID set used to calculate an ensemble of component model outputs for the sample output type, including checks that (1) compound_taskid_set is a subset of task_id_cols, (2) the provided model_out_tbl is compatible with the specified compound_taskid_set, and (3) all models submit predictions for the same set of non compound_taskid_set variables. — validate_compound_taskid_set","title":"Perform validations on the compound task ID set used to calculate an ensemble of component model outputs for the sample output type, including checks that (1) compound_taskid_set is a subset of task_id_cols, (2) the provided model_out_tbl is compatible with the specified compound_taskid_set, and (3) all models submit predictions for the same set of non compound_taskid_set variables. — validate_compound_taskid_set","text":"Perform validations compound task ID set used calculate ensemble component model outputs sample output type, including checks (1) compound_taskid_set subset task_id_cols, (2) provided model_out_tbl compatible specified compound_taskid_set, (3) models submit predictions set non compound_taskid_set variables.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/validate_compound_taskid_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform validations on the compound task ID set used to calculate an ensemble of component model outputs for the sample output type, including checks that (1) compound_taskid_set is a subset of task_id_cols, (2) the provided model_out_tbl is compatible with the specified compound_taskid_set, and (3) all models submit predictions for the same set of non compound_taskid_set variables. — validate_compound_taskid_set","text":"","code":"validate_compound_taskid_set(   model_out_tbl,   task_id_cols,   compound_taskid_set,   derived_tasks = NULL,   return_missing_combos = FALSE )"},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/validate_compound_taskid_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform validations on the compound task ID set used to calculate an ensemble of component model outputs for the sample output type, including checks that (1) compound_taskid_set is a subset of task_id_cols, (2) the provided model_out_tbl is compatible with the specified compound_taskid_set, and (3) all models submit predictions for the same set of non compound_taskid_set variables. — validate_compound_taskid_set","text":"model_out_tbl object class model_out_tbl component model outputs (e.g., predictions). task_id_cols character vector names columns model_out_tbl specify modeling tasks. Defaults NULL, case columns model_out_tbl \"model_id\", \"output_type\", \"output_type_id\", \"value\" used task ids. compound_taskid_set character vector compound task ID variable set. argument relevant output_type \"sample\". Can one three possible values, following meanings: NA: compound_taskid_set relevant current modeling task NULL: samples multivariate joint distribution across levels task id variables Equality task_id_cols: samples separate univariate distributions individual prediction task Defaults NA. Derived task ids must included task ids values depend part compound_taskid_set. derived_tasks character vector derived task IDs (variables whose values depend task ID variables). Defaults NULL, meaning derived task IDs. return_missing_combos boolean specifying whether return data.frame summarizing missing combinations dependent tasks model. TRUE, columns data.frame \"model_id\" one dependent tasks (complement compound_taskid_set). Defaults FALSE.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/validate_compound_taskid_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform validations on the compound task ID set used to calculate an ensemble of component model outputs for the sample output type, including checks that (1) compound_taskid_set is a subset of task_id_cols, (2) the provided model_out_tbl is compatible with the specified compound_taskid_set, and (3) all models submit predictions for the same set of non compound_taskid_set variables. — validate_compound_taskid_set","text":"model_out_tbl passes validations, return value. Otherwise, function either throw error return_missing_combos FALSE, data.frame missing combinations dependent tasks returned. See details.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Example weights data for linear_pool() — weights","title":"Example weights data for linear_pool() — weights","text":"Toy weights data formatted according hubverse standards used examples linear_pool(). Weights 0.25, 0.5, 0.25.","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example weights data for linear_pool() — weights","text":"","code":"weights"},{"path":[]},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/reference/weights.html","id":"weights","dir":"Reference","previous_headings":"","what":"weights","title":"Example weights data for linear_pool() — weights","text":"data frame 3 rows 2 columns: model_id model ID location FIPS codes weight weight","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-development-version","dir":"Changelog","previous_headings":"","what":"hubEnsembles (development version)","title":"hubEnsembles (development version)","text":"hubEnsembles.Rmd article now explains ensemble samples using linear_pool() linear_pool() supports requesting subset component model sample forecasts ensembling samples (#144) linear_pool() supports specification compound task ID set, trajectory samples can correctly ensembled (#144) linear_pool() supports simplest case ensembling samples, component samples collected returned (#109)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-019","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.9","title":"hubEnsembles 0.1.9","text":"CRAN release: 2024-10-02 simple_ensemble() now uses identical() avoid triggering .equal.environment() error. error sometimes occur providing agg_fun argument custom function. (#134)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-018","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.8","title":"hubEnsembles 0.1.8","text":"CRAN release: 2024-09-26 README now points hubverse R-universe Package submission CRAN","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-017","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.7","title":"hubEnsembles 0.1.7","text":"hubEnsembles.Rmd vignette now article linear_pool() now properly splits pools (#128) linear_pool_quantile() uses internal package functions , Hmisc-utils functions Functions using all_of() updated avoid throwing dplyr warnings","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-016","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.6","title":"hubEnsembles 0.1.6","text":"Base R 4.1 pipe (|>) used place magrittr pipe (%>%) Function examples simplified simple_ensemble() now produces valid distributions weighted medians (#122)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-015","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.5","title":"hubEnsembles 0.1.5","text":"Validate weights argument doesn’t contain weights dependent output type ID PMF CDF forecasts (#35)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-014","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.4","title":"hubEnsembles 0.1.4","text":"Functions now use map() list_rbind() conjunction avoid superseded warnings purrr (#117) Functions now use double quotes .data[[]] appropriate within dplyr functions avoid warnings (#117)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-013","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.3","title":"hubEnsembles 0.1.3","text":"Organization name changed “hubverse-org” (#115)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-012","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.2","title":"hubEnsembles 0.1.2","text":"hubEnsembles.Rmd vignette now better reflects package capabilities (#29, #113) Example data date removed (#113) Hmisc dependency removed (#55)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-011","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.1","title":"hubEnsembles 0.1.1","text":"hubUtils dependency bumped 0.0.1 higher, split hubUtils hubData (#98) Roxygen bumped 7.3.1 Lint workflow added (#96, #98) GitHub workflows upgraded (#96, #98)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-010","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.1.0","title":"hubEnsembles 0.1.0","text":"Example data added (#95) Package docs upgraded hubStyle theme (#93)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-009001","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.0.9001","title":"hubEnsembles 0.0.9001","text":"linear_pool_quantile() now coerces quantile levels numeric prevent distfromq errors (#58, #63)","code":""},{"path":"https://hubverse-org.github.io/hubEnsembles/dev/news/index.html","id":"hubensembles-009000","dir":"Changelog","previous_headings":"","what":"hubEnsembles 0.0.9000","title":"hubEnsembles 0.0.9000","text":"Initial Release.","code":""}]
